import { DeviceInfo, Possible, Rect, XNODE } from '@/typings';
import { VIEW_STATUS } from '@/utils/constant';
declare class xNode implements XNODE {
    originNode: HTMLElement;
    deviceInfo?: DeviceInfo;
    actionType?: string;
    isTrackable: boolean;
    parentNodes: XNODE[];
    index: number;
    tagName: string;
    id: string;
    classList: string[];
    get content(): Possible<string>;
    hyperlink: Possible<string>;
    currentXpath: string;
    isIgnored: boolean;
    isPseudoList: boolean;
    isPureList: boolean;
    isContainer: boolean;
    peerNodes: Element[];
    xParents: XNODE[];
    isOutFlow: boolean;
    isLimitViewport: boolean;
    triggerEvent: 'VIEW_CLICK' | 'VIEW_CHANGE';
    rect: Rect;
    viewStatus?: keyof typeof VIEW_STATUS;
    zLevel: number;
    private _pureList;
    private _pseudoList;
    constructor(originNode: HTMLElement, deviceInfo?: DeviceInfo, actionType?: string, isTrackable?: boolean, parentNodes?: XNODE[]);
    private _checkGioIndex;
    private _getDlIndex;
    private _getListIndex;
    private _getIndex;
    private _isListNode;
    private _getIsPureList;
    private _getGlobalListNodes;
    private _findListContainer;
    private _isLikelyListContainer;
    private _isValidGlobalListItem;
    private _getNodeDepth;
    private _getIsPseudoList;
    private _findLongestUniformSequence;
    private _updateMaxSequenceIfBetter;
    private _getSiblings;
    private _compareNodes;
    private _compareArrays;
    private _getClassList;
    private _getCurrentXpath;
    private _getIsContainer;
    private _getIsOutFlow;
    private _getRect;
    private _getListItemViewStatus;
    private _getViewStatus;
    private _getTriggerEvent;
    private static xNodeCache;
    private _getXParents;
}
export default xNode;
