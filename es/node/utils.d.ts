import BaseNode from './base-node';
import { Maybe } from '../typings';
export declare const hasValidAttribute: (node: Node, attr: string) => boolean;
export declare const isRootNode: (node: Maybe<Node>) => boolean;
export declare const findParent: <P>(child: Node, filter: (current: Node) => boolean | void) => P;
export declare const getDeepChildren: (parent: Maybe<Node>) => Element[];
export declare const getChildren: (parent: Maybe<Node>) => Element[];
export declare const isLeaf: (node: Node) => boolean;
export declare const isParentOfLeaf: (node: Node) => boolean;
export declare const isListTag: (node: Node) => boolean;
export declare const isContainerTag: (node: Node) => boolean;
export declare const supportIconTag: (node: Node) => boolean;
export declare const onlyContainsIconChildren: (node: Node) => boolean;
export declare const onlyContainsTextChildren: (node: Node) => boolean;
export declare const clickableInput: (node: Node) => boolean;
export declare const changeableInput: (node: Node) => boolean;
export declare const depthInside: (node: Element, threshold?: number, depth?: number) => boolean;
export declare const isIgnore: (node: Node) => boolean;
export declare const getEffectiveNode: (node: Node) => Element;
export declare const getMarkIndex: (node: Node) => Maybe<number>;
export declare const computeXpath: (target: BaseNode) => string[];
export declare const removeDiffTagOnHeadAndTail: (elements: Element[], target: Node) => Element[];
